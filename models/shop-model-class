<?php
require_once 'page-model-class';
class ShopModel extends PageModel{
    public $name = '';
    public $description = '';
    public $price = '';
    public $filename = '';

    public $nameErr = '';
    public $descriptionErr = '';
    public $priceErr = '';
    public $filenameErr = '';

    public $productvalid = false;
    public $valid = false;

    private $shopcrud;

    public function __construct($model, $shopcrud = ''){
        PARENT::__construct($model);
        $this -> shopcrud = $shopcrud;
    }

    public function validateProduct(){
        $this -> nameErr = $this -> descriptionErr = $this -> priceErr = "";
        $this -> name = $this -> TestInput($this -> getPostVar('name'));
        $this -> description = $this -> TestInput($this -> getPostVar('description'));
        $this -> price = $this -> TestInput($this -> getPostVar('price'));
        $this -> filename = $this -> TestInput($this -> getPostVar('filename'));
        $productvalid = false;

        // de foto lukt niet
        // $target_dir = "Images/";
        // $target_file = $target_dir . basename($this -> filename);
        // $uploadOk = 1;
        // $imageFileType = strtolower(pathinfo($target_file,PATHINFO_EXTENSION));

        if ($_SERVER["REQUEST_METHOD"] == "POST") {
            if (empty($this -> name)) {
                $this -> nameErr = "naam is verplicht";
            } else {
                if (!ctype_alpha($this -> name)) {
                    $this -> nameErr = "nummers in de naam zijn niet toegstaan";
                }
            }
            if (empty($this -> description)) {
                $this -> descriptionErr = "beschrijving is verplicht";
            }
            if (empty($this -> price)) {
                $this -> priceErr = "prijs is verplicht";
            }
            if (empty($this -> filename)) {
                $this -> filenameErr = "foto is verplicht";
            }
            if (empty($this -> nameErr) && empty($this -> descriptionErr) && empty($this -> priceErr) && empty($this -> filenameErr)) {
                try {
                    $this -> productvalid = true;
                } catch(Exception $e){
                    $this -> genericErr = 'sorry er is een technische storing4';
                }
            }
        }
    }
    public function SaveProduct(){
        $this -> shopcrud -> createProduct($this -> name, $this -> description, $this -> price, $this -> filename);
        // mischien kan ik het testen als het af is met de newproduct 
        // $conn = $this -> ConnectDB();
        // try {
        //     $name = $this -> name = $conn->real_escape_string($this -> name);
        //     $description = $this -> description = $conn->real_escape_string($this -> description);
        //     $price = $this -> price = $conn->real_escape_string($this -> price);
        //     $filename = $this -> filename = $conn->real_escape_string($this -> filename);
        //     $sql = "INSERT INTO products (name, description, price, filename)
        //     VALUES ('$name','$description','$price', '$filename')";
        //     if (mysqli_query($conn, $sql) === FALSE) {
        //         throw new Exception("Het is niet gelukt om het in het database te zetten");
        //     }
        // } finally {    
        // mysqli_close($conn);
        // }
    }
    public function GetAllProducts(){
        return $this -> shopcrud -> readAllProducts();
    }
    public function GetProductById($productId){
        return $this -> shopcrud -> readProductByProductId($productId);
    }
    public function GetTop5Products(){
        return $this -> shopcrud -> readTop5Products();
    }
    public function SaveOrder($userId, $productId){
        $this -> shopcrud -> createOrder($userId, $productId);
    }
    public function requestCart(){
        $this -> total = 0;
        $this -> cartLines = array();
        $cart = $this -> sessionManager -> getCart();
        $this -> carts = $cart;
        return $cart;
    }
    public function handleActions(){
        $action = $this -> GetPostVar("action");
            switch($action){
                case "AddProductToCart":
                    $productId = $this -> GetPostVar("productid");
                    $this -> sessionManager -> AddProductToCart($productId);
                    break;
                case "RemoveProductFromCart":
                    $productId = $this -> GetPostVar("productid");
                    $this -> sessionManager -> RemoveProductFromCart($productId);
                    break;
                case "AddProductToDatabase":
                    $this -> AddProductToDatabase();
                    break;
            }
    }
    private function AddProductToDatabase(){
        $userId = $this -> sessionManager -> getLogInUserId();
        $products = $this -> sessionManager -> getCart();
        $productsId = array_keys($products);
            foreach($productsId as $productId){
                for($i=0; $i < $products[$productId]; $i++){
                    $this -> SaveOrder($userId, $productId);
                }
            }
        $this -> sessionManager -> CleanCart();
    }
}