<?php
define("RESULT_OK", 0);
define("RESULT_UNKNOWN_USER", -1);
define("RESULT_WRONG_PASSWORD", -2);
class UserModel extends PageModel{
    public $name = '';
    public $email = '';
    public $password = '';
    public $firstname = '';
    public $lastname = '';
    public $phone = '';
    public $compref = '';
    public $feedback = '';
    public $pref = '';

    public $nameErr = '';
    public $emailErr = '';
    public $passwordErr = '';
    public $databaseErr = '';
    public $genericErr = '';
    public $firstnameErr = '';
    public $lastnameErr = '';
    public $phoneErr = '';
    public $comprefErr = '';
    public $feedbackErr = '';
    public $prefErr = '';
    
    public $userId = 0;
    public $passwordvalid = false;
    public $registervalid = false;
    public $loginvalid = false;
    public $valid = false;

    private $usercrud;

    public function __construct($model){
        PARENT::__construct($model);
    }
    public function CheckRegister() {
        $this -> nameErr = $this -> emailErr = $this -> passwordErr = 
        $this -> passwordcheckErr = $this -> databaseErr = $this -> genericErr = "";
        $this -> name = $this -> TestInput($this -> getPostVar('name'));
        $this -> email = $this -> TestInput($this -> getPostVar('email'));
        $this -> password = $this -> TestInput($this -> getPostVar('password'));
        $this -> passwordcheck = $this -> TestInput($this -> getPostVar('passwordcheck'));
        $registervalid = false;
        if ($_SERVER["REQUEST_METHOD"] == "POST") {
            if (empty($this -> name)) {
                $this -> nameErr = "naam is verplicht";
            } else {
                if (!ctype_alpha($this -> name)) {
                    $this -> nameErr = "nummers in je naam zijn niet toegstaan";
                }
            }
            if (empty($this -> email)) {
                $this -> emailErr = "email is verplicht";
            } else {
                if (!filter_var($this -> email, FILTER_VALIDATE_EMAIL)) {
                    $this -> emailErr = "je moet een echt emailadres invullen";
                }
            }
            if (empty($this -> password)) {
                $this -> passwordErr = "wachtwoord is verplicht";
            } else if (empty($this -> passwordcheck)) {
                    $this -> passwordcheckErr = "herhaal wachtwoord is verplicht";
                } else if ($this -> password != $this -> passwordcheck) {
                        $this -> passwordErr = $this -> passwordcheckErr = "wachtwoorden moeten hetzelfde zijn";
                    }
            if (empty($this -> nameErr) && empty($this -> emailErr) && empty($this -> passwordErr) && empty($this -> passwordcheckErr)) {
                try {
                    if($this -> FindUserByEmail($this -> email) == FALSE){
                        $this -> registervalid = true;
                    }else {
                        $this -> emailErr = "de email bestaat al";
                    }
                } catch(Exception $e){
                    $this -> genericErr = 'sorry er is een technische storing4';
                }
            }
        }
    }

    public function SaveUser(){
        $conn = $this -> ConnectDB();
        try {
            $name = $this -> name = $conn->real_escape_string($this -> name);
            $email = $this -> email = $conn->real_escape_string($this -> email);
            $password = $this -> password = $conn->real_escape_string($this -> password);
            $sql = "INSERT INTO users (name, email, password)
            VALUES ('$name','$email','$password')";
            if (mysqli_query($conn, $sql) === FALSE) {
                throw new Exception("Het is niet gelukt om het in het database te zetten");
            }
        } finally {    
        mysqli_close($conn);
        }
    }

    public function validateLogin(){
        $this -> emailErr = $this -> passwordErr = $this -> genericErr = "";
        $userId = $name = "";
        $this -> email = $this -> TestInput($this -> getPostVar('email'));
        $this -> password = $this -> TestInput($this -> getPostVar('password'));
        $loginvalid = false;
        if ($_SERVER["REQUEST_METHOD"] == "POST") {
            try {
                $userInfo = $this -> AuthorizeUserByEmail($this -> email, $this -> password);
                switch($userInfo['result']) {
                    case RESULT_UNKNOWN_USER:
                        $this -> emailErr = "deze email is niet gevonden in het database";
                        break;
                    case RESULT_WRONG_PASSWORD:
                        $this -> passwordErr = "wachtwoord hoort niet bij deze email";
                        break;
                    case RESULT_OK:
                        $name = $userInfo["user"]["name"];
                        $userId = $userInfo["user"]["id"];
                        $this -> loginvalid = true;
                        break;
                    default: 
                    logDebug("Onbekend result " . $userInfo['result']);
                    break;
                    }
                } catch(Exception $e){
                    $this -> genericErr = 'sorry er is een technische storing3';
            }
        }
    }

    public function CheckPassword() {
        $this -> oldpasswordErr = $this -> passwordErr = $this -> passwordcheckErr = $this -> genericErr = "";
        $this -> userId = 0;
        $this -> oldpassword = $this -> TestInput($this -> getPostVar('oldpassword'));
        $this -> password = $this -> TestInput($this -> getPostVar('password'));
        $this -> passwordcheck = $this -> TestInput($this -> getPostVar('passwordcheck'));
        $passwordvalid = false;
        if ($_SERVER["REQUEST_METHOD"] == "POST") {
            if (empty($this -> password)) {
                $this -> passwordErr = "wachtwoord is verplicht";
            } else if (empty($this -> passwordcheck)) {
                $this -> passwordcheckErr = "herhaal wachtwoord is verplicht";
            } else if ($this -> password != $this -> passwordcheck) {
                $this -> passwordErr = $this -> passwordcheckErr = "wachtwoorden moeten hetzelfde zijn";
            }
            if (empty($this -> oldpassword)) {
                $this -> oldpasswordErr = "wachtwoord is verplicht";
            } else {
                try{
                $user = $this -> AuthorizeUserByUserId($this -> sessionManager -> getLogInUserId(), $this -> oldpassword);
                }
                catch(Exception $e){
                    $this -> genericErr = 'sorry er is een technische storing';
                }
                switch($user['result']) {
                    case RESULT_WRONG_PASSWORD:
                        $this -> oldpasswordErr = "wachtwoord hoort niet bij deze email";
                        break;
                    case RESULT_OK:
                        if (empty($this -> oldpasswordErr) && empty($this -> passwordErr) && empty($this -> passwordcheckErr)) {
                            $this -> passwordvalid = true;
                            $this -> userId = $this -> sessionManager -> getLogInUserId();
                        }
                        break;
                }
            }
        }
    }
    public function AuthorizeUserByUserId($userId, $password){
        $user = $this -> FindUserByUserId($userId);
        return $this -> AuthorizeUser($user, $password);
    }
    public function FindUserByUserId($userId){
        $conn = $this -> ConnectDB();
        try {
            $userId = $conn->real_escape_string($userId);
            $sql = "SELECT * FROM users WHERE id='$userId'";
            $result = mysqli_query($conn, $sql);
            if (!$result) {
                throw new Exception("Finding User failed, SQL: " . $sql . ", Error " . $conn->error());
            }
            return $result->fetch_assoc();
        } finally {
        mysqli_close($conn);
        }
    }
    public function GetUser(){
        $userId = $this -> sessionManager -> getLogInUserId();
        $password = $this -> sessionManager -> getLogInPassword();
        return array ($userId, $password);
    }

    public function UpdateUser($userId, $password){
        $conn = $this -> ConnectDB();
        try {
            $password = $conn->real_escape_string($password);
            $userId = $conn->real_escape_string($userId);
            $sql = "UPDATE users SET password='$password' WHERE id='$userId'";
            if (mysqli_query($conn, $sql) === FALSE) {
                throw new Exception("Het is niet gelukt om het in het database te zetten");
            }
        } finally {    
        mysqli_close($conn);
        }
    }

    public function AuthorizeUserByEmail($email, $password){
        $user = $this -> FindUserByEmail($email);
        return $this -> AuthorizeUser($user, $password);
    }
    
    public function AuthorizeUser($user, $password){
        if(empty($user)){
            return ['result' => RESULT_UNKNOWN_USER]; 
        }
        if($password != $user['password']){
            return ['result' => RESULT_WRONG_PASSWORD]; 
        }
        return ['result' => RESULT_OK, 'user' => $user]; 
    }

    public function FindUserByEmail($email){
        $conn = $this -> ConnectDB();
        try {
            $email = $conn->real_escape_string($email);
            $sql = "SELECT * FROM users WHERE email='$email'";
            $result = mysqli_query($conn, $sql);
            if (!$result) {
                throw new Exception("Finding User failed, SQL: " . $sql . ", Error " . $conn->error());
            }
            return $result->fetch_assoc();
        } finally {
        mysqli_close($conn);
        }
    }
    public function authenticateUser(){
        $user = $this -> findUserByEmail($this -> email);
        $this -> name = $user['name'];
        $this -> userId = $user['id'];
    }

    public function LoginUser(){
        $user = $this -> findUserByEmail($this -> email);
        $this -> sessionManager -> LogInUserSession($user['name'], $user['id'], $user['role']);
        $this -> genericErr = "Login successvol";
    }
    public function LogoutUser(){
        $this -> sessionManager -> LogoutUserSession();
        $this -> genericErr = "Logout successvol";
    }
    public function ValidateContact() {
        $this -> firstnameErr = $this -> lastnameErr = $this -> emailErr = $this -> phoneErr = 
        $this -> comprefErr = $this -> feedbackErr = $this -> prefErr = $this -> genericErr = "";
        $this -> pref = $this -> TestInput($this -> getPostVar('Pref'));
        $this -> firstname = $this -> TestInput($this -> getPostVar('Firstname'));
        $this -> lastname = $this -> TestInput($this -> getPostVar('Lastname'));
        $this -> email = $this -> TestInput($this -> getPostVar('Email'));
        $this -> phone = $this -> TestInput($this -> getPostVar('PhoneNum'));
        $this -> compref = $this -> TestInput($this -> getPostVar('ComPref'));
        $this -> feedback = $this -> TestInput($this -> getPostVar('Feedback'));
        $valid = false;
        if ($_SERVER["REQUEST_METHOD"] == "POST") {
            if (empty($this -> pref)) {
                $this -> prefErr = "aanhef is verplicht";
            } else {
                $pref = $this -> TestInput($this ->pref);
            }
            if (empty($this -> firstname)) {
                $this -> firstnameErr = "voornaam is verplicht";
            } else {
                if (!ctype_alpha($this -> firstname)) {
                    $this -> firstnameErr = "nummers in je naam zijn niet toegstaan";
                }
            }
            if (empty($this -> lastname)) {
                $this -> lastnameErr = "achternaam is verplicht";
            } else {
                if (!ctype_alpha($this -> lastname)) {
                    $this -> lastnameErr = "nummers in je naam zijn niet toegstaan";
                } 
            }
            if (empty($this -> email)) {
                $this -> emailErr = "email is verplicht";
            } else {
                if (!filter_var($this -> email, FILTER_VALIDATE_EMAIL)) {
                    $this -> emailErr = "je moet een echt emailadres invullen";
                }
            }
            if (empty($this -> phone)) {
                $this -> phoneErr = "telefoonnummer is verplicht";
            }
            if (empty($this -> compref)) {
                $this -> comprefErr = "keuze is verplicht";
            }
            if (empty($this -> feedback)) {
                $this -> feedbackErr = "feedback is verplicht";
            }
            if (empty($this -> prefErr) && empty($this -> firstnameErr) && empty($this -> lastnameErr) && empty($this -> emailErr) 
            && empty($this -> phoneErr) && empty($this -> comprefErr) && empty($this -> feedbackErr)) {
                $this -> valid = true;
            }
        }
    }
}